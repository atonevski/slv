#!/usr/bin/env ruby
# encoding: utf-8

require 'gli'
require 'fileutils'
require 'zippy'
require 'rainbow'


begin # XXX: Remove this begin/rescue before distributing your app
require 'slv'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/slv` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/slv now"
  exit 64
end

include GLI::App

program_desc 'Службен Весник на РМ/RM Gazette grep tool'

version SLV::VERSION

desc 'Set host name'
default_value SLV::HOST # 'www.slvesnik.com.mk' # in futer use SLV::HOST
arg_name 'Host name'
flag [:h,:host]

desc 'Set archive dir'
default_value SLV::ARC_DIR
arg_name 'Archive directory'
flag [:a, :'archive-dir']

desc 'Set email address'
default_value SLV::EMAIL_ADDR
arg_name 'email address'
flag [:e, :email]

desc 'Archive issues per year'
long_desc =<<-EOT
  Archive handles issues zipped in yearly archives or unzipped in the archive 
  directory. You can list and view issue location (unzipped, zipped, web).
EOT
arg_name 'Archive subcommand: list|add|remove (default is list)'
command :archive do |arc|
  arc.desc 'Add issue in archive'
  arc.long_desc <<-EOT
    This (sub)command adds spicified issue(s) in archive either using single
    issue or range form. Default year is current year.
  EOT
  arc.arg_name 'issue(s) [year]'
  arc.command :add do |add|
    add.action do |global_options,options,args|
      # issue format: single or interval
      year  = Time.now.year # default value
      range = 1 .. 1
      if args[0] =~ /^(\d+)$/
        issue = Regexp.last_match[1].to_i
        range = issue .. issue
      elsif args[0] =~ /^(\d+)-(\d+)$/
        range = Regexp.last_match[1].to_i .. Regexp.last_match[2].to_i
      else
        raise "Invalid issue argument (single_issue|from-to)"
      end
      year = args[1].to_i if args[1]
      zip_file_name = File.join(global_options[:a], "#{year}.zip")
      zip  = if File.exists? zip_file_name
               Zippy.open(zip_file_name)
              else
                Zippy.create(zip_file_name)
              end
      http  = SLV::HTTP.new(global_options[:host])
      links = http.issues_for(year)
      if links[range.begin].nil? or links[range.end].nil?
        raise "Range (#{range.begin}..#{range.end}) error" 
      end
      range.each do |issue|
        file_name = sprintf("%d-%03d.pdf", year, issue)
        # pdf = http.get_issue(year, issue)
        raise "Issue #{year}-#{issue} doesn't exist" unless links[issue]
        pdf = http.issue_from_link(links[issue])
        raise "Can't download issue #{year}-#{issue}" unless pdf
        zip[file_name] = pdf # append/update issue in archive
      end
    end
  end

  arc.desc 'List archive'
  arc.long_desc <<-EOT
    This (sub)command lists contents of zip archive. If issues are not present 
    in the zip archive they are printed in red color on the console and/or 
    using the '-' prefix. If cached (unzipped in the arc directory) they 
    are printed in yellow color and/or using the '*' prefix. If present
    in archive they are printed in green and/or using the '+' prefix.
    If issue is in range but not present anywhere a '?' prefix is used.
  EOT
  arc.command :list do |ls|
    ls.desc 'List archive in colums'
    ls.switch [:c, :columns]
    
    ls.action do |global_options,options,args|
      http = SLV::HTTP.new(global_options[:host])
      year = (args[0] ? args[0].to_i : Time.now.year)
      issues = http.issues_for(year)
      raise "Error downloading issues for #{year}" unless issues
      # 12345678901234567890
      # yyyy-nnn.pdf_

      COL = (options[:columns] ? 6 : 1)
      output = []
      total = issues.size - 1
      ROW = total.div(COL) + (total % COL > 0 ? 1 : 0)
      issues[1 .. -1].each_with_index do |issue, index|
        file_name = sprintf("%d-%03d.pdf", year, index+1)
        zip_file_name = File.join(global_options[:a], "#{year}.zip")
        col, row = index.divmod(ROW)
        output[row] = [] if output[row].nil?
        if issue.nil?
          output[row][col] = (COL==1 ? '?' : '') + ' '*12
        elsif File.exists?(File.join(global_options[:a], file_name))
          output[row][col] = ((COL==1 ? '*' : '') + file_name).color(:green)
        elsif File.exists?(zip_file_name) and 
              Zippy.open(zip_file_name).to_a.include?(file_name)
          output[row][col] = ((COL==1 ? '+' : '') + file_name).color(:yellow)
        else
          output[row][col] = ((COL==1 ? '-' : '') + file_name).color(:red)
        end
      end
      output.each do |row|
        puts (row.map {|e| e.nil? ? ' '*12 : e}.join(' '))
      end
    end
  end

  arc.desc 'Remove issue(s)'
  arc.long_desc <<-EOT
    Remove issue(s) from archive
  EOT
  arc.arg_name 'issue(s) [year]'
  arc.command :remove do |rm|
    # should check if archive doesn't exist -- if it doesn't exists then
    # report 'nothing to do!'
    rm.action do |global_options,options,args|
      # issue format: single or interval
      year  = Time.now.year # default value
      range = 1 .. 1
      if args[0] =~ /^(\d+)$/
        issue = Regexp.last_match[1].to_i
        range = issue .. issue
      elsif args[0] =~ /^(\d+)-(\d+)$/
        range = Regexp.last_match[1].to_i .. Regexp.last_match[2].to_i
      else
        raise "Invalid issue argument (single_issue|from-to)"
      end
      year = args[1].to_i if args[1]
      zip_file_name = File.join(global_options[:a], "#{year}.zip")
      zip  = if File.exists? zip_file_name
               Zippy.open(zip_file_name)
              else
                puts "Nothing to do!"
                exit 0
              end
      http  = SLV::HTTP.new(global_options[:host])
      links = http.issues_for(year)
      if links[range.begin].nil? or links[range.end].nil?
        raise "Range (#{range.begin}..#{range.end}) error" 
      end
      range.each do |issue|
        file_name = sprintf("%d-%03d.pdf", year, issue)
        raise "Issue #{year}-#{issue} missing" unless links[issue]
        zip.delete(file_name) if zip.to_a.include? file_name
      end
    end
  end

  arc.desc 'Extract issue(s)'
  arc.long_desc <<-EOT
    Extract issue(s) from archive into the archive directory.
  EOT
  arc.arg_name 'issue(s) [year]'
  arc.command :extract do |ex|
    # should check if archive doesn't exist -- if it doesn't exists then
    # report 'nothing to do!'
    ex.action do |global_options,options,args|
      # issue foexat: single or interval
      year  = Time.now.year # default value
      range = 1 .. 1
      if args[0] =~ /^(\d+)$/
        issue = Regexp.last_match[1].to_i
        range = issue .. issue
      elsif args[0] =~ /^(\d+)-(\d+)$/
        range = Regexp.last_match[1].to_i .. Regexp.last_match[2].to_i
      else
        raise "Invalid issue argument (single_issue|from-to)"
      end
      year = args[1].to_i if args[1]
      zip_file_name = File.join(global_options[:a], "#{year}.zip")
      zip  = if File.exists? zip_file_name
               Zippy.open(zip_file_name)
              else
                puts "Nothing to do!"
                exit 0
              end
      http  = SLV::HTTP.new(global_options[:host])
      links = http.issues_for(year)
      if links[range.begin].nil? or links[range.end].nil?
        raise "Range (#{range.begin}..#{range.end}) error" 
      end
      range.each do |issue|
        file_name = sprintf("%d-%03d.pdf", year, issue)
        raise "Issue #{year}-#{issue} missing" unless links[issue]
        if zip.to_a.include? file_name
          path = File.join(global_options[:a], file_name)
          File.open(path, 'w') { |fh| fh.write(zip[file_name]) }
        end
      end
    end
  end

  arc.default_command :list
end

desc 'Grep issue(s)'
long_desc =<<EOT
  Search issue(s) for a phrase. Issue(s) is in a 
  single or range format. Year is optional (default is current year).
  Phrase is regular expression. Always add issue in zip archive
  if not present.
EOT
arg_name 'issue(s) [year] regexp'
command :grep do |grep|
  grep.action do |global_options,options,args|

    range = 1 .. 1
    if args[0] =~ /^(\d+)$/
      issue = Regexp.last_match[1].to_i
      range = issue .. issue
    elsif args[0] =~ /^(\d+)-(\d+)$/
      range = Regexp.last_match[1].to_i .. Regexp.last_match[2].to_i
    else
      raise "Invalid issue argument (single_issue|from-to)"
    end

    year  = Time.now.year # default value
    re    = nil
    if args.size == 3
      year = args[1].to_i
      re = %r{#{args[2]}}i
    else
      re = %r{#{args[1]}}i
    end
      
    year = args[1].to_i if args[1]
    zip_file_name = File.join(global_options[:a], "#{year}.zip")
    zip  = if File.exists? zip_file_name
              Zippy.open(zip_file_name)
            else
              Zippy.create(zip_file_name)
            end
    http  = SLV::HTTP.new(global_options[:host])
    links = http.issues_for(year)
    if links[range.begin].nil? or links[range.end].nil?
      raise "Range (#{range.begin}..#{range.end}) error" 
    end
    range.each do |issue|
      file_name = sprintf("%d-%03d.pdf", year, issue)
      raise "Issue #{year}-#{issue} missing" unless links[issue]
      path = File.join(global_options[:a], file_name)
      if File.exists? path
        # cache ...
        results = SLV.grep(path, re)
        puts "*#{file_name}(#{re.to_s}): #{results.join(', ')}".color(:green)
      elsif zip.to_a.include? file_name
        # zip...
        pdf = zip[file_name]
        results = SLV.grep(pdf, re)
        puts "+#{file_name}(#{re.to_s}): #{results.join(', ')}".color(:yellow)
      else
        # fetch from web and add to zip
        pdf = http.issue_from_link(links[issue])
        zip[file_name] = pdf
        results = SLV.grep(pdf, re)
        puts "-#{file_name}(#{re.to_s}): #{results.join(', ')}".color(:red)
      end
    end
  end
end

desc 'Describe notify here'
arg_name 'Describe arguments to notify here'
command :notify do |c|
  c.action do |global_options,options,args|
    puts "notify command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  # always create the arcive directory if non existing
  unless Dir.exists? global[:a]
    FileUtils.mkdir global[:a]
    # puts "ARC dir '#{global[:a]}' DOES NOT exists"
  else
    # puts "ARC dir '#{global[:a]}' exists"
  end
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

# make sure the help command doesn't skip pre block]
# GLI::Commands::Help.skips_pre = false

exit run(ARGV)

__END__
TODO:
  - exit codes 
  - cucumber/aruba for all flags, config files, log files
  - notify
  - grep command: grep 'expression' issue(s) [year]: should fetch: 1st from dir, then from zip, lastly
    from web
  - 

DONE:
  - http should have issues_for(year) method which returns array a[issue] = link  - prepare for cucumber/aruba
  - added some ansi/colors for columnar archive list 
  - arc using zippy
  - added SLV::HTTP.issue_from_link() and use it for the archive --append command
  - added '?', '*', '+', '-' prefix in one column output for archive --list [year] command for
    ?=non-existent issue, *=unzipped in arc dir, +=present in zip file, -=missing (to be downloaded)
  - added git repository
  - code executing prior ALL comands (including, help): ceating the arc dir
  - implemented command nesting using command/subcommands gli's idioms
  - add the archive/extract command (same as delete) 
  - setup rspec for TDD



